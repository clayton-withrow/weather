{"version":3,"sources":["Header.js","Home.js","Weather.js","Getl.js","Current.js","Form.js","Search.js","Contact.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","react_router_dom","exact","to","path","Home","align","React","Component","Weather","props","city","country","temperature","humidity","description","error","Getl","onClick","getWeather","API_KEY","Current","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","fetch","concat","sent","json","console","log","_this","setState","main","temp","name","sys","weather","stop","src_Getl","this","src_Weather","Form","onSubmit","type","placeholder","Search","target","elements","value","src_Form","Contact","lib","App","src_Header","react_router","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d8f579e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => (\r\n    <header>\r\n        <span className=\"icn-logo\"><i className=\"material-icons\"></i></span>\r\n            <ul className=\"main-nav\">\r\n                <li><NavLink exact to=\"/\">Home</NavLink></li>\r\n                <li><NavLink exact to=\"/Current\">Current</NavLink></li>\r\n                <li><NavLink path to =\"/Search\">Search</NavLink></li>\r\n                <li><NavLink path to=\"/Contact\">Contact</NavLink></li>\r\n            </ul> \r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 align=\"center\">Weather App</h1>\r\n        <h3 align=\"center\">Code Louisville - JavaScript/React Project</h3>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n      <div>\r\n        {/* Displays data passed down from props only if all conditions are true. */}\r\n        { props.city && props.country && <p>Location: {props.city}, {props.country}</p> }\r\n        { props.temperature && <p>Temperature: {props.temperature}</p>}\r\n        { props.humidity && <p>Humidity: {props.humidity}</p>}\r\n        { props.description && <p>Conditions: {props.description}</p>}\r\n        { props.error && <p>{props.error}</p>}\r\n      </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\nconst Getl = props => (\r\n    //This line calls the getWeather method defined in the Current component upon submission.\r\n            <button align=\"center\" onClick={props.getWeather}>Click for Weather in Louisville</button>\r\n        );  \r\n\r\nexport default Getl;","import React from 'react';\r\nimport Weather from './Weather';\r\nimport Getl from './Getl';\r\n\r\nconst API_KEY = \"77770f5e783b278efb85bb2f676b854d\";\r\n\r\nclass Current extends React.Component {\r\n\r\n    //Creation of initial state of object.\r\n        state = {\r\n            temperature: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            error: undefined\r\n        }\r\n\r\n  getWeather = async (e) => {\r\n\r\n    //Prevents page from refreshing upon form submission.\r\n    e.preventDefault();\r\n\r\n    //Derives value of input fields from form to insert into API.\r\n    const city = \"Louisville\";\r\n    const country = \"US\";\r\n\r\n    //This line makes the API call to openweathermap.org and inserts the API key as defined above.\r\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\r\n\r\n    //Conditional statement to check for input before updating state.\r\n    if (city && country) {\r\n\r\n        //This line converts the response from the API into json format.\r\n        const data = await api_call.json();\r\n        console.log(data);\r\n\r\n        //Updates value of state after API call.\r\n        this.setState({\r\n            temperature: data.main.temp,\r\n            city: data.name,\r\n            country: data.sys.country,\r\n            humidity: data.main.humidity,\r\n            description: data.weather[0].description,\r\n            error: \"\"\r\n            });\r\n        }  else {\r\n            //If incompatible input is entered state remains undefined, error generated.\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"Please enter values.\"\r\n                });\r\n        } \r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        {/* This line renders the GetL component and passes down the getWeather function as a prop. */}\r\n        <Getl getWeather={this.getWeather} />\r\n        {/* Calls the weather components and passes state as a prop. */}\r\n        <Weather \r\n            temperature={this.state.temperature}\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            humidity={this.state.humidity}\r\n            description={this.state.description}\r\n            error={this.state.error}\r\n            />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Current;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    //This line calls the getWeather method defined in the Current component upon submission.\r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country\" />\r\n            <button>Submit</button>\r\n        </form>\r\n        );  \r\n\r\nexport default Form;","import React from 'react';\r\nimport Form from './Form';\r\nimport Weather from './Weather';\r\n\r\nconst API_KEY = \"77770f5e783b278efb85bb2f676b854d\";\r\n\r\nclass Search extends React.Component {\r\n\r\n    //Creation of initial state of object.\r\n        state = {\r\n            temperature: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            error: undefined\r\n        }\r\n\r\n  getWeather = async (e) => {\r\n\r\n    //Prevents page from refreshing upon form submission.\r\n    e.preventDefault();\r\n\r\n    //Derives value of input fields from form to insert into API.\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    //This line makes the API call to openweathermap.org and inserts the API key as defined above.\r\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\r\n\r\n    //Conditional statement to check for input before updating state.\r\n    if (city && country) {\r\n\r\n        //This line converts the response from the API into json format.\r\n        const data = await api_call.json();\r\n        console.log(data);\r\n\r\n        //Updates value of state after API call.\r\n        this.setState({\r\n            temperature: data.main.temp,\r\n            city: data.name,\r\n            country: data.sys.country,\r\n            humidity: data.main.humidity,\r\n            description: data.weather[0].description,\r\n            error: \"\"\r\n            });\r\n        }  else {\r\n            //If incompatible input is entered state remains undefined, error generated.\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"Please enter values.\"\r\n                });\r\n        } \r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        {/* This line renders the Form component and passes down the getWeather function as a prop. */}\r\n        <Form getWeather={this.getWeather} />\r\n        {/* Calls the weather components and passes state as a prop. */}\r\n        <Weather \r\n            temperature={this.state.temperature}\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            humidity={this.state.humidity}\r\n            description={this.state.description}\r\n            error={this.state.error}\r\n            />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport { HashLink as Link } from 'react-router-hash-link';\r\n\r\nclass Contact extends React.Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1 align=\"center\">Clayton Withrow</h1>\r\n                <h1 align=\"center\"><Link to=\"cwithrow@gmail.com\">E-mail</Link></h1>\r\n                <h1 align=\"center\"><Link to=\"https://github.com/clayton-withrow\">Github</Link></h1>\r\n                <h1 align=\"center\"><Link to=\"https://www.linkedin.com/in/clayton-withrow/\">LinkedIn</Link></h1>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Contact;","import React from 'react';\nimport {\n  BrowserRouter,\n  Route\n} from 'react-router-dom';\n\n//App Components\nimport Header from './Header';\nimport Home from './Home';\nimport Current from './Current';\nimport Search from './Search';\nimport Contact from './Contact';\n\n\nconst App = () => (\n  <BrowserRouter>\n    <div className=\"container\">\n      {/* Creates routing between the different components of app. */}\n      <Header />\n      <Route exact path=\"/\" component={Home} />\n      <Route path =\"/Current\" component={Current} />\n      <Route path =\"/Search\" component={Search} />\n      <Route path =\"/Contact\" component={Contact} />\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}