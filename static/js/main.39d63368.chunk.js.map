{"version":3,"sources":["Header.js","Home.js","Form.js","Weather.js","Current.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","react_router_dom","exact","to","path","Home","React","Component","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","Current","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","src_Form","this","src_Weather","App","src_Header","react_router","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.39d63368.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = () => (\r\n    <header>\r\n        <span className=\"icn-logo\"><i className=\"material-icons\"></i></span>\r\n            <ul className=\"main-nav\">\r\n                <li><NavLink exact to=\"/\">Home</NavLink></li>\r\n                <li><NavLink path to =\"/Current\">Current</NavLink></li>\r\n            </ul> \r\n    </header>\r\n);\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <h1>Placeholder</h1>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst Form = props => (\r\n    //This line calls the getWeather method defined in the Current component upon submission.\r\n        <form onSubmit={props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country\" />\r\n            <button>Submit</button>\r\n        </form>\r\n        );  \r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = props => (\r\n      <div>\r\n        {/* Displays data passed down from props only if all conditions are true. */}\r\n        { props.city && props.country && <p>Location: {props.city}, {props.country}</p> }\r\n        { props.temperature && <p>Temperature: {props.temperature}</p>}\r\n        { props.humidity && <p>Humidity: {props.humidity}</p>}\r\n        { props.description && <p>Conditions: {props.description}</p>}\r\n        { props.error && <p>{props.error}</p>}\r\n      </div>\r\n);\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Form from './Form';\r\nimport Weather from './Weather';\r\n\r\nconst API_KEY = \"77770f5e783b278efb85bb2f676b854d\";\r\n\r\nclass Current extends React.Component {\r\n\r\n    //Creation of initial state of object.\r\n        state = {\r\n            temperature: undefined,\r\n            city: undefined,\r\n            country: undefined,\r\n            humidity: undefined,\r\n            description: undefined,\r\n            error: undefined\r\n        }\r\n\r\n  getWeather = async (e) => {\r\n\r\n    //Prevents page from refreshing upon form submission.\r\n    e.preventDefault();\r\n\r\n    //Derives value of input fields from form to insert into API.\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n    //This line makes the API call to openweathermap.org and inserts the API key as defined above.\r\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\r\n\r\n    //Conditional statement to check for input before updating state.\r\n    if (city && country) {\r\n\r\n        //This line converts the response from the API into json format.\r\n        const data = await api_call.json();\r\n        console.log(data);\r\n\r\n        //Updates value of state after API call.\r\n        this.setState({\r\n            temperature: data.main.temp,\r\n            city: data.name,\r\n            country: data.sys.country,\r\n            humidity: data.main.humidity,\r\n            description: data.weather[0].description,\r\n            error: \"\"\r\n            });\r\n        }  else {\r\n            //If incompatible input is entered state remains undefined, error generated.\r\n            this.setState({\r\n                temperature: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                humidity: undefined,\r\n                description: undefined,\r\n                error: \"Please enter values.\"\r\n                });\r\n        } \r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        {/* This line renders the Form component and passes down the getWeather function as a prop. */}\r\n        <Form getWeather={this.getWeather} />\r\n        {/* Calls the weather components and passes state as a prop. */}\r\n        <Weather \r\n            temperature={this.state.temperature}\r\n            city={this.state.city}\r\n            country={this.state.country}\r\n            humidity={this.state.humidity}\r\n            description={this.state.description}\r\n            error={this.state.error}\r\n            />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Current;","import React from 'react';\nimport {\n  BrowserRouter,\n  Route\n} from 'react-router-dom';\n\n//App Components\nimport Header from './Header';\nimport Home from './Home';\nimport Current from './Current';\n\n\n\nconst App = () => (\n  <BrowserRouter>\n    <div className=\"container\">\n      <Header />\n      <Route exact path=\"/\" component={Home} />\n      <Route path =\"/Current\" component={Current} />\n\n\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}